import typing
from datetime import datetime
from telegram import Bot, Update, Dice
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ChatAction


class ApplicationController:
    def __init__(self, config):
        # –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏
        self.winners = {}
        self.username_map = {}
        # –ü–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–≥—Ä—ã, –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏ –±–æ–ª—å—à–µ –Ω–µ —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è
        self.game_active = True
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.config: typing.Dict = config
        # –ö–µ—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.processed_messages: typing.Set[int] = set()

    @classmethod
    def register_game(cls, game_controller):
        cls.game_controller = game_controller

    @classmethod
    def register_logger(cls, winner, error):
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        cls.winners_logger = winner
        cls.error_logger = error

    async def handle_dice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è """
        if not self.game_active:
            # –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–æ–ø-—Å–æ–æ–±—â–µ–Ω–∏–µ
            stop_message = self.config['stop_message']
            await self.send_reply(update, stop_message)
            return
        message = update.message
        user_id = message.from_user.id
        username = message.from_user.username
        dice = message.dice

        if message.forward_origin:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message.message_id in self.processed_messages:
            return
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–∏–Ω—è—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–µ—à —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.processed_messages.add(message.message_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –ø–æ–±–µ–¥—ã
        if self.game_controller.check_win_condition(dice):
            win_time = datetime.now()

            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–±–µ–¥—É
            self.log_winner(user_id, username, win_time, dice.value, message.message_id)

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            win_count = len(self.winners.get(user_id, []))

            if win_count >= self.config['wins_needed']:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç–∏–≥ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–±–µ–¥
                self.game_active = False
                win_message = self.config['win_message']
                await self.send_reply(update, win_message)
                print(f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: @{username if username else user_id}")

            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –¥–æ—Å—Ç–∏–≥ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–±–µ–¥
                progress_msg = self.config['progress_message'].format(count=win_count)
                await self.send_reply(update, progress_msg)

    async def send_reply(self, update: Update, message: str):
        """ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ """
        try:
            await update.message.reply_text(message)
        except Exception as e:
            self.error_logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    def log_winner(self, user_id: int, username: str, win_time: datetime, dice_value: int, message_id: int):
        """ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è """
        user_mention = f"@{username}" if username else f"id{user_id}"
        self.winners.setdefault(user_id, [])

        win_data = {
            "datetime": win_time,
            "value": dice_value,
            "message_id": message_id
        }
        self.winners[user_id].append(win_data)
        self.username_map[user_id] = user_mention

        # –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥
        times_str = ', '.join([f"{dt['datetime'].strftime('%Y-%m-%d %H:%M:%S')}(–≤—ã–ø–∞–ª–æ:{dt['value']})"
                               for dt in self.winners[user_id]])
        log_entry = f"{user_mention}: [{times_str}] ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message_id}"

        self.winners_logger.info(log_entry)
        print(f"–ó–∞–ø–∏—Å–∞–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å: {log_entry}")

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ """
        self.error_logger.error(f"–û—à–∏–±–∫–∞: {context.error}")

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        status_text = (
            f"üìä –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã:\n"
            f"- –ò–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞ ‚úÖ\n" if self.game_active else "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚õî\n"
            f"- –¢–µ–∫—É—â–∏–µ –ª–∏–¥–µ—Ä—ã:\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–ø-–ø–æ–±–µ–¥–∏—Ç–µ–ª—è—Ö
        sorted_winners = sorted(self.winners.items(), key=lambda x: len(x[1]), reverse=True)#[:5]
        for i, (user_id, wins) in enumerate(sorted_winners, 1):
            username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å username –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if wins:
                user_mention = self.username_map.get(user_id, f"id{user_id}")
                message_links = []
                for win in wins:
                    message_links.append(f"https://t.me/logovoboica/{win.get('message_id', '–æ—à–∏–±–∫–∞')}")
                links_string = "\n".join(message_links)
                status_text += f"{i}. {user_mention}: {len(wins)} –ø–æ–±–µ–¥\n{links_string}\n\n"

        await self.send_reply(update, status_text)