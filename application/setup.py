import datetime
import sys
import os
from pathlib import Path
import typing
import json
from application.games.casino import CasinoGameController
from application.controller import ApplicationController
from application.logger import setup_logger

ROOT_PATH = Path(__file__).parent.parent


class ApplicationBuilder:
    config_path = ROOT_PATH / 'config.json'
    log_dir = ROOT_PATH / 'logs' / datetime.datetime.now().strftime("%H-%M-%S_%Y-%m-%d")
    env_file = ROOT_PATH / '.env'

    @classmethod
    def build(cls):
        from dotenv import load_dotenv
        print(cls.env_file)
        load_dotenv(dotenv_path=cls.env_file)
        cls.check_health()
        config = cls.load_config()
        app = ApplicationController(config)
        # TODO —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π (–∫–æ—Å—Ç–∏/–¥–∞—Ä—Ç—Å/–∫–∞–∑–∏–∫)
        app.register_game(CasinoGameController(config))
        app.register_logger(*setup_logger(cls.log_dir))
        return app

    @staticmethod
    def check_health():
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        try:
            from telegram import Bot, Update, Dice
            from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
            from telegram.constants import ChatAction
            from dotenv import load_dotenv
        except ImportError as e:
            print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {e}")
            print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
            sys.exit(1)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not token:
            print("–û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN!")
            print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: TELEGRAM_BOT_TOKEN=your_bot_token_here")
            sys.exit(1)

    @classmethod
    def _create_default_config(cls) -> typing.Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        default_config = {
            "win_condition": "slot_jackpot",  # slot_jackpot, specific_value, any_win
            "wins_needed": 2,
            "dice_emoji": "üé∞",  # üé≤, üéØ, üé≥, üèÄ, ‚öΩ, üé∞
            "target_values": [64],  # –î–ª—è üé∞: 64 - –¥–∂–µ–∫–ø–æ—Ç
            "win_message": "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! üéâ",
            "stop_message": "‚õî –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!",
            "progress_message": "{count} –ø–æ–±–µ–¥"
        }

        with open(cls.config_path, 'w', encoding='utf-8') as f:
            json.dump(default_config, f, ensure_ascii=False, indent=2)

        print(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {cls.config_path}")
        return default_config

    @classmethod
    def load_config(cls) -> typing.Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            with open(cls.config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            required_fields = ['win_condition', 'wins_needed', 'dice_emoji',
                               'target_values', 'win_message', 'stop_message',
                               'progress_message']

            for field in required_fields:
                if field not in config:
                    raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –≤ –∫–æ–Ω—Ñ–∏–≥–µ: {field}")

            return config

        except FileNotFoundError:
            print(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {cls.config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            print("–°–æ–∑–¥–∞—é —Ñ–∞–π–ª —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
            return cls._create_default_config()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            sys.exit(1)
